"use strict";(self.webpackChunkdanieltjw_pf=self.webpackChunkdanieltjw_pf||[]).push([[5075],{7245:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Interview_Preperation/Things_To_Remember","title":"LeetCode Notes","description":"Two Sum","source":"@site/docs/Interview_Preperation/Things_To_Remember.md","sourceDirName":"Interview_Preperation","slug":"/Interview_Preperation/Things_To_Remember","permalink":"/danieltjw-pf/docs/Interview_Preperation/Things_To_Remember","draft":false,"unlisted":false,"editUrl":"https://github.com/Danieltanjw/danieltjw-pf/docs/Interview_Preperation/Things_To_Remember.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Python Notes on Algorithms","permalink":"/danieltjw-pf/docs/Interview_Preperation/Python_Algorithms_Notes"},"next":{"title":"Markdown Syntax Guide","permalink":"/danieltjw-pf/docs/Markdown_Syntax_Guide"}}');var r=t(4848),s=t(8453);const o={},l="LeetCode Notes",a={},d=[{value:"Two Sum",id:"two-sum",level:2},{value:"Solution #1",id:"solution-1",level:3},{value:"Solution #2",id:"solution-2",level:3},{value:"Valid Parenthesis",id:"valid-parenthesis",level:2},{value:"Solution",id:"solution",level:3},{value:"Palindrome",id:"palindrome",level:2},{value:"Solution",id:"solution-3",level:3},{value:"Merge Two Sorted Lists",id:"merge-two-sorted-lists",level:2},{value:"Solution",id:"solution-4",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"leetcode-notes",children:"LeetCode Notes"})}),"\n",(0,r.jsx)(n.h2,{id:"two-sum",children:"Two Sum"}),"\n",(0,r.jsx)(n.p,{children:"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order."}),"\n",(0,r.jsx)(n.h3,{id:"solution-1",children:"Solution #1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"for i in range (len(nums)):\n    for j in range (1, len(nums)):\n        if nums[i]+nums[j] == target:\n            return [i,j]\n"})}),"\n",(0,r.jsx)(n.h3,{id:"solution-2",children:"Solution #2"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"number_map = {}\nfor i, num in enumerate(nums):\n    diff = target - num\n    if diff in number_map:\n        return [i, number_map[diff]]\n    number_map[num] = i\nreturn None\n"})}),"\n",(0,r.jsx)(n.h2,{id:"valid-parenthesis",children:"Valid Parenthesis"}),"\n",(0,r.jsxs)(n.p,{children:["Given a string s containing just the characters '(', ')', '",", ","', '[' and ']', determine if the input string is valid.\nAn input string is valid if:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Open brackets must be closed by the same type of brackets."}),"\n",(0,r.jsx)(n.li,{children:"Open brackets must be closed in the correct order."}),"\n",(0,r.jsx)(n.li,{children:"Every close bracket has a corresponding open bracket of the same type."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# Map Parenthesis\np = {'(':')', '[':']', '{':'}'}\nstack = []\n\n# For each item in the string\nfor i in s:\n    # If open bracket, add the close bracket to the stack\n    if i in p:\n        stack.append(p[i])\n    # If close bracket, check if stack is empty, if not, check if item == first item in the stack.\n    elif len(stack) > 0 and i == stack[-1]:\n        stack.pop()\n    else:\n        return False\nreturn len(stack)==0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"palindrome",children:"Palindrome"}),"\n",(0,r.jsx)(n.p,{children:"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise."}),"\n",(0,r.jsx)(n.h3,{id:"solution-3",children:"Solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"result = ''.join(char.lower() for char in s if char.isalnum())\nreturn result == result[::-1]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"merge-two-sorted-lists",children:"Merge Two Sorted Lists"}),"\n",(0,r.jsx)(n.p,{children:"You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list."}),"\n",(0,r.jsx)(n.h3,{id:"solution-4",children:"Solution"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"head = body = ListNode(0)\nwhile list1 and list2:\n    if list1.val < list2.val:\n        body.next = list1\n        list1 = list1.next\n    else:\n        body.next = list2\n        list2 = list2.next\n    body = body.next\nbody.next = list1 or list2\nreturn head.next\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);