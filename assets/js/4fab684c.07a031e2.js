"use strict";(self.webpackChunkdanieltjw_pf=self.webpackChunkdanieltjw_pf||[]).push([[3901],{7679:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Programming_Sandbox_Documentation","title":"Implementing a Programming Sandbox in Docusaurus","description":"This documentation provides a step-by-step guide to creating a programming sandbox in Docusaurus. The sandbox allows users to write and execute code in Python, C++, and Java using the Judge0 API.","source":"@site/docs/Programming_Sandbox_Documentation.md","sourceDirName":".","slug":"/Programming_Sandbox_Documentation","permalink":"/danieltjw-pf/docs/Programming_Sandbox_Documentation","draft":false,"unlisted":false,"editUrl":"https://github.com/Danieltanjw/danieltjw-pf/docs/Programming_Sandbox_Documentation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Vectorized Algorithms","permalink":"/danieltjw-pf/docs/Basic_Programming_Languages/Python_Guide/Vectorized_Algorithms_Documentation"},"next":{"title":"Project Documentation","permalink":"/danieltjw-pf/docs/Project_Documentation_Guide"}}');var o=s(4848),i=s(8453);const r={},a="Implementing a Programming Sandbox in Docusaurus",d={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Install Required Dependencies",id:"step-1-install-required-dependencies",level:2},{value:"Step 2: Create the Sandbox Page",id:"step-2-create-the-sandbox-page",level:2},{value:"Step 3: Access the Sandbox",id:"step-3-access-the-sandbox",level:2},{value:"Customization Options",id:"customization-options",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"implementing-a-programming-sandbox-in-docusaurus",children:"Implementing a Programming Sandbox in Docusaurus"})}),"\n",(0,o.jsxs)(e.p,{children:["This documentation provides a step-by-step guide to creating a programming sandbox in Docusaurus. The sandbox allows users to write and execute code in Python, C++, and Java using the ",(0,o.jsx)(e.strong,{children:"Judge0 API"}),"."]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Node.js and npm"}),": Ensure you have Node.js installed on your system."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Docusaurus Installed"}),": Set up a Docusaurus project. Follow the ",(0,o.jsx)(e.a,{href:"https://docusaurus.io/docs",children:"Docusaurus documentation"})," if needed."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"API Key for Judge0"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Sign up at ",(0,o.jsx)(e.a,{href:"https://rapidapi.com/judge0-official/api/judge0-ce/",children:"RapidAPI Judge0"}),"."]}),"\n",(0,o.jsx)(e.li,{children:"Obtain your API key from the Judge0 dashboard."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"step-1-install-required-dependencies",children:"Step 1: Install Required Dependencies"}),"\n",(0,o.jsx)(e.p,{children:"Install the following npm packages for your project:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm install @uiw/react-codemirror @codemirror/lang-python @codemirror/lang-cpp @codemirror/lang-java @codemirror/theme-one-dark axios\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"step-2-create-the-sandbox-page",children:"Step 2: Create the Sandbox Page"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["Navigate to the ",(0,o.jsx)(e.code,{children:"src/pages/"})," directory in your Docusaurus project."]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["Create a file named ",(0,o.jsx)(e.code,{children:"sandbox.js"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:["Add the following code to ",(0,o.jsx)(e.code,{children:"sandbox.js"}),":"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"import React, { useState } from 'react';\nimport axios from 'axios';\nimport CodeMirror from '@uiw/react-codemirror';\nimport { python } from '@codemirror/lang-python';\nimport { cpp } from '@codemirror/lang-cpp';\nimport { java } from '@codemirror/lang-java';\nimport { oneDark } from '@codemirror/theme-one-dark';\nimport Layout from '@theme/Layout';\n\nconst languageExtensions = {\n  python: python,\n  cpp: cpp,\n  java: java,\n};\n\nconst languageIds = {\n  python: 71, // Judge0 ID for Python 3\n  cpp: 76, // Judge0 ID for C++ (GCC 9.2.0)\n  java: 62, // Judge0 ID for Java (OpenJDK 13)\n};\n\nconst boilerplateTemplates = {\n  python: (code) => `${code}\n\nif __name__ == \"__main__\":\n    main()`,\n  cpp: (code) =>\n    `#include <iostream>\nusing namespace std;\n\nint main() {\n${code\n      .split('\\n')\n      .map((line) => `    ${line}`)\n      .join('\\n')}\n    return 0;\n}`,\n  java: (code) =>\n    `public class Main {\n    public static void main(String[] args) {\n${code\n      .split('\\n')\n      .map((line) => `        ${line}`)\n      .join('\\n')}\n    }\n}`,\n};\n\nconst Sandbox = () => {\n  const [code, setCode] = useState('');\n  const [language, setLanguage] = useState('python');\n  const [output, setOutput] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const handleLanguageChange = (event) => {\n    setLanguage(event.target.value);\n    setOutput('');\n    setCode('');\n  };\n\n  const executeCode = async () => {\n    const completeCode = boilerplateTemplates[language](code);\n\n    setLoading(true);\n    try {\n      const response = await axios.post(\n        'https://judge0-ce.p.rapidapi.com/submissions',\n        {\n          source_code: completeCode,\n          language_id: languageIds[language],\n          stdin: '',\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com',\n            'X-RapidAPI-Key': '<YOUR_API_KEY>',\n          },\n        }\n      );\n\n      const token = response.data.token;\n\n      const pollForResult = async (token) => {\n        while (true) {\n          const resultResponse = await axios.get(\n            `https://judge0-ce.p.rapidapi.com/submissions/${token}`,\n            {\n              headers: {\n                'X-RapidAPI-Host': 'judge0-ce.p.rapidapi.com',\n                'X-RapidAPI-Key': '<YOUR_API_KEY>',\n              },\n            }\n          );\n\n          const result = resultResponse.data;\n\n          if (result.status.id === 3) {\n            return result;\n          }\n\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n        }\n      };\n\n      const result = await pollForResult(token);\n      setOutput(result.stdout || result.stderr || 'No output.');\n    } catch (err) {\n      if (err.response && err.response.status === 403) {\n        setOutput('Error: Forbidden. Please check your API key or usage limits.');\n      } else {\n        setOutput(`Error: ${err.message}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Layout>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '2rem' }}>\n        <h1>Programming Sandbox</h1>\n        <div style={{ marginBottom: '1rem', width: '100%', display: 'flex', justifyContent: 'space-between' }}>\n          <select value={language} onChange={handleLanguageChange} style={{ padding: '10px' }}>\n            <option value=\"python\">Python</option>\n            <option value=\"cpp\">C++</option>\n            <option value=\"java\">Java</option>\n          </select>\n          <button onClick={executeCode} disabled={loading} style={{ padding: '10px 20px' }}>\n            {loading ? 'Running...' : 'Run Code'}\n          </button>\n        </div>\n        <CodeMirror\n          value={code}\n          extensions={[languageExtensions[language]()]\n          theme={oneDark}\n          onChange={(value) => setCode(value)}\n          height=\"200px\"\n          style={{ marginBottom: '1rem', width: '100%' }}\n        />\n        <div style={{ border: '1px solid black', padding: '1rem', width: '100%' }}>\n          <h3>Output:</h3>\n          <pre>{output || 'No output yet.'}</pre>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default Sandbox;\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"step-3-access-the-sandbox",children:"Step 3: Access the Sandbox"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Start the development server:","\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm start\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Navigate to ",(0,o.jsx)(e.code,{children:"/sandbox"})," in your browser (e.g., ",(0,o.jsx)(e.code,{children:"http://localhost:3000/sandbox"}),")."]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"customization-options",children:"Customization Options"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Languages"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Add or remove languages by updating the ",(0,o.jsx)(e.code,{children:"languageExtensions"})," and ",(0,o.jsx)(e.code,{children:"languageIds"})," mappings."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Boilerplate Code"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Modify the ",(0,o.jsx)(e.code,{children:"boilerplateTemplates"})," object to customize how the user's code is wrapped."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Styling"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Update the inline styles or use a custom CSS file for advanced styling."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"403 Error"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Ensure your API key is valid and has not exceeded usage limits."}),"\n",(0,o.jsx)(e.li,{children:"Check the API key in your RapidAPI dashboard."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"No Output"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Verify the user's code is valid."}),"\n",(0,o.jsx)(e.li,{children:"Ensure the Judge0 API response is properly logged for debugging."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:"This concludes the documentation for implementing a programming sandbox in Docusaurus."})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>a});var t=s(6540);const o={},i=t.createContext(o);function r(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);